// /*
// Copyright The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./ipam/ippool_manager.go

// Package ipam_mocks is a generated GoMock package.
package ipam_mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	v1alpha4 "sigs.k8s.io/cluster-api/api/v1alpha4"
)

// MockIPPoolManagerInterface is a mock of IPPoolManagerInterface interface
type MockIPPoolManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIPPoolManagerInterfaceMockRecorder
}

// MockIPPoolManagerInterfaceMockRecorder is the mock recorder for MockIPPoolManagerInterface
type MockIPPoolManagerInterfaceMockRecorder struct {
	mock *MockIPPoolManagerInterface
}

// NewMockIPPoolManagerInterface creates a new mock instance
func NewMockIPPoolManagerInterface(ctrl *gomock.Controller) *MockIPPoolManagerInterface {
	mock := &MockIPPoolManagerInterface{ctrl: ctrl}
	mock.recorder = &MockIPPoolManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPPoolManagerInterface) EXPECT() *MockIPPoolManagerInterfaceMockRecorder {
	return m.recorder
}

// SetFinalizer mocks base method
func (m *MockIPPoolManagerInterface) SetFinalizer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFinalizer")
}

// SetFinalizer indicates an expected call of SetFinalizer
func (mr *MockIPPoolManagerInterfaceMockRecorder) SetFinalizer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizer", reflect.TypeOf((*MockIPPoolManagerInterface)(nil).SetFinalizer))
}

// UnsetFinalizer mocks base method
func (m *MockIPPoolManagerInterface) UnsetFinalizer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsetFinalizer")
}

// UnsetFinalizer indicates an expected call of UnsetFinalizer
func (mr *MockIPPoolManagerInterfaceMockRecorder) UnsetFinalizer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetFinalizer", reflect.TypeOf((*MockIPPoolManagerInterface)(nil).UnsetFinalizer))
}

// SetClusterOwnerRef mocks base method
func (m *MockIPPoolManagerInterface) SetClusterOwnerRef(arg0 *v1alpha4.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClusterOwnerRef", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClusterOwnerRef indicates an expected call of SetClusterOwnerRef
func (mr *MockIPPoolManagerInterfaceMockRecorder) SetClusterOwnerRef(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClusterOwnerRef", reflect.TypeOf((*MockIPPoolManagerInterface)(nil).SetClusterOwnerRef), arg0)
}

// UpdateAddresses mocks base method
func (m *MockIPPoolManagerInterface) UpdateAddresses(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddresses", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddresses indicates an expected call of UpdateAddresses
func (mr *MockIPPoolManagerInterfaceMockRecorder) UpdateAddresses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddresses", reflect.TypeOf((*MockIPPoolManagerInterface)(nil).UpdateAddresses), arg0)
}
